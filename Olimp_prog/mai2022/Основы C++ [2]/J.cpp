/*
В заданном массиве найдите все позиции локального максимума, локального минимума, глобального максимума и глобального минимума.

Элемент является локальным минимумом, если ai−1>ai<ai+1
. Элемент является локальным максимумом, если ai−1<ai>ai+1
.

Если соседний элемент отсутствует, то сравнение с ним не производится.

Входные данные
В первой строке входного файла вам дано единственное число N
 (1⩽N⩽105)
 — длина массива.

В следующей строке вам заданы значения элементов ai
 массива разделённые пробелами, все значения попарно различны и по модулю не превышают 109
.

Выходные данные
В первой строке выведите количество локальных минимумов и все их позиции разделённые пробелом в порядке возрастания.

Во второй строке выведите количество локальных максимумов и все их позиции разделённые пробелом в порядке возрастания.

В третьей строке выведите позиции глобального минимума и глобального максимума, разделённые пробелом.*/

#include <bits/stdc++.h>

using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int n;
    cin >> n;
    vector<int> a(n); 

    for(int i=0; i<n; ++i){
        cin >> a[i];
    }

    if(n == 1){
        cout << 1 << " " << 1 << "\n";
        cout << 1 << " " << 1 << "\n";
        cout << 1 << " " << 1;
        return 0;
    }
    if(n == 2){
        if(a[0] > a[1]){
        cout << 1 << " " << 2 << "\n";
        cout << 1 << " " << 1 << "\n";
        cout << 2 << " " << 1;
        }
        else{
        cout << 1 << " " << 1 << "\n";
        cout << 1 << " " << 2 << "\n";
        cout << 1 << " " << 2;

        }
        return 0;
    }

    int mx=INT_MIN, mn=INT_MAX;
    vector<int> l_mx;
    vector<int> l_mn;
    int mx_i, mn_i;

   
    for(int i=0; i<n; ++i){
        if(a[i] > mx){
            mx = a[i];
            mx_i = i+1;
        }
        if(a[i] < mn){
            mn = a[i];
            mn_i = i+1;
        }
 
        if(i == 0){
            continue;
        }
 
        if(i == 1){
            if(a[i-1] > a[i]){
                l_mx.push_back(i);
            }
            if(a[i-1] < a[i]){
                l_mn.push_back(i);
            }
        }
        if(i == (n-1)){
            if(a[i-1] < a[i]){
                l_mx.push_back(i+1);
            }
            if(a[i-1] > a[i]){
                l_mn.push_back(i+1);
            }
        }
 
        if(i != 0 && i != (n-1)){
        // cout << a[i-1] << " " << a[i] << " " << a[i+1];
        if(a[i-1] < a[i] && a[i+1] < a[i]){
            l_mx.push_back(i+1);
        }
        if(a[i-1] > a[i] && a[i+1] > a[i]){
            l_mn.push_back(i+1);
        }  
        }
 
    }
    cout << l_mn.size() << " ";
    for(size_t i=0; i<l_mn.size(); ++i){
        cout << l_mn[i] << " ";
    }
    cout << "\n";
    cout << l_mx.size() << " ";
    for(size_t i=0; i<l_mx.size(); ++i){
        cout << l_mx[i] << " ";
    }
    cout << "\n";
 
    cout << mn_i << " " << mx_i;
}