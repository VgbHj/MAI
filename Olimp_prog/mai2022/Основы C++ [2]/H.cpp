/*
У Василия есть стеллаж с полками, на каждой полке находится некоторое количество книг, однако расставлены они не в том порядке, который нравится Василию. Так как Василий очень целеустремлённый, он решил расставить все книги в правильном порядке, для чего он будет применять следующую последовательность действий. Василий будет рассматривать все пары соседних книг на полке слева направо и если какая-то пара книг стоит в неправильном порядке, то он поменяет книги местами и продолжит рассмотрение книг на полке дальше. Если в процессе он не поменяет местами ни одной пары книг, то это будет означать что все книги стоят в правильном порядке, и больше ничего менять не нужно, в противном случае он повторит предудущий шаг.

Пока Василий занимается перестановкой книг, от вас требуется посчитать, сколько раз Василий поменяет местами соседние пары книг.

Входные данные
В первой строке вам дано единственное целое число T
 (1⩽T⩽10)
 — количество полок в стеллаже.

Далее идут описания этих полок в парах строк. В первой строке из пары даётся единстванное число N
 (1⩽N⩽1000)
, в во второй даётся N
 чисел — позиции, на которых должна стоять каждая книга.

Выходные данные
Для каждой полки в отдельной строке выведите количество перестановок, которое совершит Василий, пока будет упорядочивать книги.*/

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    int t;
    cin >> t;

    for(int _=0; _<t; ++_){
        int count = 0;
        int n;
        cin >> n;
        vector<int> arr(n);
        for(int i=0; i<n; ++i){
            cin >> arr[i];
        }

        for(int i=0; i<n; ++i){
            for(int j=1; j<n; ++j){
                if(arr[j-1] > arr[j]){
                    count++;
                    int tmp_n = arr[j-1];
                    arr[j-1] = arr[j];
                    arr[j] = tmp_n; 
                }
            }
            // cout << i;
            // for(int k=0; k<n; ++k){
            //     cout << arr[k] << " ";
            // }
        }
        cout << count << "\n";
    }
}